{"model_name_or_path": "claude-sonnet-3.5__issue__codegen__t-0.00__p-0.95__c-2.00__install-1__v2", "instance_id": "2a06b1", "model_patch": "\ndiff --git a/app/__init__.py b/app/__init__.py\nindex 8036d13..6f2130b 100644\n--- a/app/__init__.py\n+++ b/app/__init__.py\n@@ -1,15 +1,12 @@\n from flask import Flask\n from flask_sqlalchemy import SQLAlchemy\n from os import environ\n-from dotenv import load_dotenv\n-\n-load_dotenv()\n \n db = SQLAlchemy()\n \n def create_app():\n     app = Flask(__name__)\n-    app.config['SQLALCHEMY_DATABASE_URI'] = environ.get('DATABASE_URL')\n+    app.config['SQLALCHEMY_DATABASE_URI'] = environ.get('DATABASE_URL', 'sqlite:///restaurant.db')\n     app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n \n     db.init_app(app)\n@@ -18,3 +15,5 @@ def create_app():\n     app.register_blueprint(menu_items_bp)\n \n     return app\n+\n+app = create_app()\ndiff --git a/app/models.py b/app/models.py\nindex bc57ca9..ae7bd65 100644\n--- a/app/models.py\n+++ b/app/models.py\n@@ -2,6 +2,7 @@ from app import db\n \n class MenuItem(db.Model):\n     __tablename__ = 'menu_items'\n+    __table_args__ = {'extend_existing': True}\n \n     id = db.Column(db.Integer, primary_key=True)\n     name = db.Column(db.String(100), nullable=False)\ndiff --git a/output_restaurant_mgmt_system_flask/app/__init__.py b/output_restaurant_mgmt_system_flask/app/__init__.py\nnew file mode 100644\nindex 0000000..45ca7e3\n--- /dev/null\n+++ b/output_restaurant_mgmt_system_flask/app/__init__.py\n@@ -0,0 +1,17 @@\n+from flask import Flask\n+from os import environ\n+from app.database import db\n+\n+def create_app():\n+    app = Flask(__name__)\n+    app.config['SQLALCHEMY_DATABASE_URI'] = environ.get('DATABASE_URL', 'sqlite:///restaurant.db')\n+    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n+\n+    db.init_app(app)\n+\n+    from app.routes import menu_items_bp\n+    app.register_blueprint(menu_items_bp)\n+\n+    return app\n+\n+app = create_app()\ndiff --git a/output_restaurant_mgmt_system_flask/app/database.py b/output_restaurant_mgmt_system_flask/app/database.py\nnew file mode 100644\nindex 0000000..7804779\n--- /dev/null\n+++ b/output_restaurant_mgmt_system_flask/app/database.py\n@@ -0,0 +1,12 @@\n+from flask_sqlalchemy import SQLAlchemy\n+\n+db = SQLAlchemy()\n+\n+def init_db():\n+    from app import create_app\n+    app = create_app()\n+    with app.app_context():\n+        db.create_all()\n+\n+if __name__ == '__main__':\n+    init_db()\ndiff --git a/output_restaurant_mgmt_system_flask/app/models.py b/output_restaurant_mgmt_system_flask/app/models.py\nnew file mode 100644\nindex 0000000..7df8cd5\n--- /dev/null\n+++ b/output_restaurant_mgmt_system_flask/app/models.py\n@@ -0,0 +1,16 @@\n+from app.database import db\n+\n+class MenuItem(db.Model):\n+    __tablename__ = 'menu_items'\n+    __table_args__ = {'extend_existing': True}\n+\n+    id = db.Column(db.Integer, primary_key=True)\n+    name = db.Column(db.String(100), nullable=False)\n+    description = db.Column(db.String(500))\n+\n+    def to_dict(self):\n+        return {\n+            'id': self.id,\n+            'name': self.name,\n+            'description': self.description\n+        }\ndiff --git a/output_restaurant_mgmt_system_flask/app/routes.py b/output_restaurant_mgmt_system_flask/app/routes.py\nnew file mode 100644\nindex 0000000..997ef66\n--- /dev/null\n+++ b/output_restaurant_mgmt_system_flask/app/routes.py\n@@ -0,0 +1,48 @@\n+from flask import Blueprint, jsonify, request\n+from app.models import MenuItem\n+from app.database import db\n+\n+menu_items_bp = Blueprint('menu_items', __name__)\n+\n+@menu_items_bp.route('/menu_items', methods=['GET'])\n+def get_menu_items():\n+    menu_items = MenuItem.query.all()\n+    return jsonify([item.to_dict() for item in menu_items]), 200\n+\n+@menu_items_bp.route('/menu_items', methods=['POST'])\n+def create_menu_item():\n+    data = request.get_json()\n+    \n+    if not data or 'name' not in data:\n+        return jsonify({'error': 'Name is required'}), 400\n+\n+    menu_item = MenuItem(\n+        name=data['name'],\n+        description=data.get('description', '')\n+    )\n+    \n+    db.session.add(menu_item)\n+    db.session.commit()\n+    \n+    return jsonify(menu_item.to_dict()), 201\n+\n+@menu_items_bp.route('/menu_items/<int:id>', methods=['GET'])\n+def get_menu_item(id):\n+    menu_item = MenuItem.query.get(id)\n+    \n+    if not menu_item:\n+        return jsonify({'error': 'Menu item not found'}), 404\n+        \n+    return jsonify(menu_item.to_dict()), 200\n+\n+@menu_items_bp.route('/menu_items/<int:id>', methods=['DELETE'])\n+def delete_menu_item(id):\n+    menu_item = MenuItem.query.get(id)\n+    \n+    if not menu_item:\n+        return jsonify({'error': 'Menu item not found'}), 404\n+        \n+    db.session.delete(menu_item)\n+    db.session.commit()\n+    \n+    return '', 204\ndiff --git a/output_restaurant_mgmt_system_flask/tests/test_routes.py b/output_restaurant_mgmt_system_flask/tests/test_routes.py\nnew file mode 100644\nindex 0000000..9eed1b7\n--- /dev/null\n+++ b/output_restaurant_mgmt_system_flask/tests/test_routes.py\n@@ -0,0 +1,71 @@\n+import pytest\n+from app import create_app, db\n+from app.models import MenuItem\n+\n+@pytest.fixture\n+def app():\n+    app = create_app()\n+    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\n+    app.config['TESTING'] = True\n+    \n+    with app.app_context():\n+        db.create_all()\n+        yield app\n+        db.session.remove()\n+        db.drop_all()\n+\n+@pytest.fixture\n+def client(app):\n+    return app.test_client()\n+\n+def test_get_all_items(client):\n+    response = client.get('/menu_items')\n+    assert response.status_code == 200\n+    assert response.json == []\n+\n+def test_create_new_item(client):\n+    response = client.post('/menu_items', json={\n+        'name': 'Test Item',\n+        'description': 'Test Description'\n+    })\n+    assert response.status_code == 201\n+    assert response.json['name'] == 'Test Item'\n+    assert response.json['description'] == 'Test Description'\n+\n+def test_get_item_by_id(client):\n+    # First create an item\n+    create_response = client.post('/menu_items', json={\n+        'name': 'Test Item',\n+        'description': 'Test Description'\n+    })\n+    item_id = create_response.json['id']\n+    \n+    # Then get it\n+    response = client.get(f'/menu_items/{item_id}')\n+    assert response.status_code == 200\n+    assert response.json['name'] == 'Test Item'\n+\n+def test_delete_item_by_id(client):\n+    # First create an item\n+    create_response = client.post('/menu_items', json={\n+        'name': 'Test Item',\n+        'description': 'Test Description'\n+    })\n+    item_id = create_response.json['id']\n+    \n+    # Then delete it\n+    response = client.delete(f'/menu_items/{item_id}')\n+    assert response.status_code == 204\n+\n+def test_handle_invalid_input(client):\n+    # Test creating item with missing required fields\n+    response = client.post('/menu_items', json={})\n+    assert response.status_code == 400\n+\n+    # Test getting non-existent item\n+    response = client.get('/menu_items/999')\n+    assert response.status_code == 404\n+\n+    # Test deleting non-existent item\n+    response = client.delete('/menu_items/999')\n+    assert response.status_code == 404\n"}
