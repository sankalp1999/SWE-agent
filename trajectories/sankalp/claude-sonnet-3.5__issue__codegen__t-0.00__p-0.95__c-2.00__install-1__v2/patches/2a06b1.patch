
diff --git a/app/__init__.py b/app/__init__.py
index 8036d13..6f2130b 100644
--- a/app/__init__.py
+++ b/app/__init__.py
@@ -1,15 +1,12 @@
 from flask import Flask
 from flask_sqlalchemy import SQLAlchemy
 from os import environ
-from dotenv import load_dotenv
-
-load_dotenv()
 
 db = SQLAlchemy()
 
 def create_app():
     app = Flask(__name__)
-    app.config['SQLALCHEMY_DATABASE_URI'] = environ.get('DATABASE_URL')
+    app.config['SQLALCHEMY_DATABASE_URI'] = environ.get('DATABASE_URL', 'sqlite:///restaurant.db')
     app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
 
     db.init_app(app)
@@ -18,3 +15,5 @@ def create_app():
     app.register_blueprint(menu_items_bp)
 
     return app
+
+app = create_app()
diff --git a/app/models.py b/app/models.py
index bc57ca9..ae7bd65 100644
--- a/app/models.py
+++ b/app/models.py
@@ -2,6 +2,7 @@ from app import db
 
 class MenuItem(db.Model):
     __tablename__ = 'menu_items'
+    __table_args__ = {'extend_existing': True}
 
     id = db.Column(db.Integer, primary_key=True)
     name = db.Column(db.String(100), nullable=False)
diff --git a/output_restaurant_mgmt_system_flask/app/__init__.py b/output_restaurant_mgmt_system_flask/app/__init__.py
new file mode 100644
index 0000000..45ca7e3
--- /dev/null
+++ b/output_restaurant_mgmt_system_flask/app/__init__.py
@@ -0,0 +1,17 @@
+from flask import Flask
+from os import environ
+from app.database import db
+
+def create_app():
+    app = Flask(__name__)
+    app.config['SQLALCHEMY_DATABASE_URI'] = environ.get('DATABASE_URL', 'sqlite:///restaurant.db')
+    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
+
+    db.init_app(app)
+
+    from app.routes import menu_items_bp
+    app.register_blueprint(menu_items_bp)
+
+    return app
+
+app = create_app()
diff --git a/output_restaurant_mgmt_system_flask/app/database.py b/output_restaurant_mgmt_system_flask/app/database.py
new file mode 100644
index 0000000..7804779
--- /dev/null
+++ b/output_restaurant_mgmt_system_flask/app/database.py
@@ -0,0 +1,12 @@
+from flask_sqlalchemy import SQLAlchemy
+
+db = SQLAlchemy()
+
+def init_db():
+    from app import create_app
+    app = create_app()
+    with app.app_context():
+        db.create_all()
+
+if __name__ == '__main__':
+    init_db()
diff --git a/output_restaurant_mgmt_system_flask/app/models.py b/output_restaurant_mgmt_system_flask/app/models.py
new file mode 100644
index 0000000..7df8cd5
--- /dev/null
+++ b/output_restaurant_mgmt_system_flask/app/models.py
@@ -0,0 +1,16 @@
+from app.database import db
+
+class MenuItem(db.Model):
+    __tablename__ = 'menu_items'
+    __table_args__ = {'extend_existing': True}
+
+    id = db.Column(db.Integer, primary_key=True)
+    name = db.Column(db.String(100), nullable=False)
+    description = db.Column(db.String(500))
+
+    def to_dict(self):
+        return {
+            'id': self.id,
+            'name': self.name,
+            'description': self.description
+        }
diff --git a/output_restaurant_mgmt_system_flask/app/routes.py b/output_restaurant_mgmt_system_flask/app/routes.py
new file mode 100644
index 0000000..997ef66
--- /dev/null
+++ b/output_restaurant_mgmt_system_flask/app/routes.py
@@ -0,0 +1,48 @@
+from flask import Blueprint, jsonify, request
+from app.models import MenuItem
+from app.database import db
+
+menu_items_bp = Blueprint('menu_items', __name__)
+
+@menu_items_bp.route('/menu_items', methods=['GET'])
+def get_menu_items():
+    menu_items = MenuItem.query.all()
+    return jsonify([item.to_dict() for item in menu_items]), 200
+
+@menu_items_bp.route('/menu_items', methods=['POST'])
+def create_menu_item():
+    data = request.get_json()
+    
+    if not data or 'name' not in data:
+        return jsonify({'error': 'Name is required'}), 400
+
+    menu_item = MenuItem(
+        name=data['name'],
+        description=data.get('description', '')
+    )
+    
+    db.session.add(menu_item)
+    db.session.commit()
+    
+    return jsonify(menu_item.to_dict()), 201
+
+@menu_items_bp.route('/menu_items/<int:id>', methods=['GET'])
+def get_menu_item(id):
+    menu_item = MenuItem.query.get(id)
+    
+    if not menu_item:
+        return jsonify({'error': 'Menu item not found'}), 404
+        
+    return jsonify(menu_item.to_dict()), 200
+
+@menu_items_bp.route('/menu_items/<int:id>', methods=['DELETE'])
+def delete_menu_item(id):
+    menu_item = MenuItem.query.get(id)
+    
+    if not menu_item:
+        return jsonify({'error': 'Menu item not found'}), 404
+        
+    db.session.delete(menu_item)
+    db.session.commit()
+    
+    return '', 204
diff --git a/output_restaurant_mgmt_system_flask/tests/test_routes.py b/output_restaurant_mgmt_system_flask/tests/test_routes.py
new file mode 100644
index 0000000..9eed1b7
--- /dev/null
+++ b/output_restaurant_mgmt_system_flask/tests/test_routes.py
@@ -0,0 +1,71 @@
+import pytest
+from app import create_app, db
+from app.models import MenuItem
+
+@pytest.fixture
+def app():
+    app = create_app()
+    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'
+    app.config['TESTING'] = True
+    
+    with app.app_context():
+        db.create_all()
+        yield app
+        db.session.remove()
+        db.drop_all()
+
+@pytest.fixture
+def client(app):
+    return app.test_client()
+
+def test_get_all_items(client):
+    response = client.get('/menu_items')
+    assert response.status_code == 200
+    assert response.json == []
+
+def test_create_new_item(client):
+    response = client.post('/menu_items', json={
+        'name': 'Test Item',
+        'description': 'Test Description'
+    })
+    assert response.status_code == 201
+    assert response.json['name'] == 'Test Item'
+    assert response.json['description'] == 'Test Description'
+
+def test_get_item_by_id(client):
+    # First create an item
+    create_response = client.post('/menu_items', json={
+        'name': 'Test Item',
+        'description': 'Test Description'
+    })
+    item_id = create_response.json['id']
+    
+    # Then get it
+    response = client.get(f'/menu_items/{item_id}')
+    assert response.status_code == 200
+    assert response.json['name'] == 'Test Item'
+
+def test_delete_item_by_id(client):
+    # First create an item
+    create_response = client.post('/menu_items', json={
+        'name': 'Test Item',
+        'description': 'Test Description'
+    })
+    item_id = create_response.json['id']
+    
+    # Then delete it
+    response = client.delete(f'/menu_items/{item_id}')
+    assert response.status_code == 204
+
+def test_handle_invalid_input(client):
+    # Test creating item with missing required fields
+    response = client.post('/menu_items', json={})
+    assert response.status_code == 400
+
+    # Test getting non-existent item
+    response = client.get('/menu_items/999')
+    assert response.status_code == 404
+
+    # Test deleting non-existent item
+    response = client.delete('/menu_items/999')
+    assert response.status_code == 404
