{"model_name_or_path": "claude-sonnet-3.5__issue__codegen__t-0.00__p-0.95__c-4.00__install-1", "instance_id": "b64bf8", "model_patch": "\ndiff --git a/app/__init__.py b/app/__init__.py\nindex 8036d13..8ac755e 100644\n--- a/app/__init__.py\n+++ b/app/__init__.py\n@@ -9,7 +9,7 @@ db = SQLAlchemy()\n \n def create_app():\n     app = Flask(__name__)\n-    app.config['SQLALCHEMY_DATABASE_URI'] = environ.get('DATABASE_URL')\n+    app.config['SQLALCHEMY_DATABASE_URI'] = environ.get('DATABASE_URL', 'sqlite:///restaurant.db')\n     app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n \n     db.init_app(app)\n@@ -18,3 +18,5 @@ def create_app():\n     app.register_blueprint(menu_items_bp)\n \n     return app\n+\n+app = create_app()\ndiff --git a/app/models.py b/app/models.py\nindex bc57ca9..01bcdbd 100644\n--- a/app/models.py\n+++ b/app/models.py\n@@ -2,14 +2,21 @@ from app import db\n \n class MenuItem(db.Model):\n     __tablename__ = 'menu_items'\n-\n+    \n     id = db.Column(db.Integer, primary_key=True)\n     name = db.Column(db.String(100), nullable=False)\n-    description = db.Column(db.String(500))\n-\n+    description = db.Column(db.Text)\n+    price = db.Column(db.Float, nullable=False)\n+    category = db.Column(db.String(50))\n+    \n+    def __repr__(self):\n+        return f'<MenuItem {self.name}>'\n+    \n     def to_dict(self):\n         return {\n             'id': self.id,\n             'name': self.name,\n-            'description': self.description\n+            'description': self.description,\n+            'price': self.price,\n+            'category': self.category\n         }\ndiff --git a/app/routes.py b/app/routes.py\nindex 8feab93..6766144 100644\n--- a/app/routes.py\n+++ b/app/routes.py\n@@ -4,45 +4,45 @@ from app import db\n \n menu_items_bp = Blueprint('menu_items', __name__)\n \n-@menu_items_bp.route('/menu_items', methods=['GET'])\n+@menu_items_bp.route('/menu-items', methods=['GET'])\n def get_menu_items():\n     menu_items = MenuItem.query.all()\n-    return jsonify([item.to_dict() for item in menu_items]), 200\n+    return jsonify([item.to_dict() for item in menu_items])\n \n-@menu_items_bp.route('/menu_items', methods=['POST'])\n+@menu_items_bp.route('/menu-items/<int:id>', methods=['GET'])\n+def get_menu_item(id):\n+    menu_item = MenuItem.query.get_or_404(id)\n+    return jsonify(menu_item.to_dict())\n+\n+@menu_items_bp.route('/menu-items', methods=['POST'])\n def create_menu_item():\n     data = request.get_json()\n-    \n-    if not data or 'name' not in data:\n-        return jsonify({'error': 'Name is required'}), 400\n-\n-    menu_item = MenuItem(\n+    new_item = MenuItem(\n         name=data['name'],\n-        description=data.get('description', '')\n+        description=data.get('description'),\n+        price=data['price'],\n+        category=data.get('category')\n     )\n-    \n-    db.session.add(menu_item)\n+    db.session.add(new_item)\n     db.session.commit()\n-    \n-    return jsonify(menu_item.to_dict()), 201\n+    return jsonify(new_item.to_dict()), 201\n \n-@menu_items_bp.route('/menu_items/<int:id>', methods=['GET'])\n-def get_menu_item(id):\n-    menu_item = MenuItem.query.get(id)\n+@menu_items_bp.route('/menu-items/<int:id>', methods=['PUT'])\n+def update_menu_item(id):\n+    menu_item = MenuItem.query.get_or_404(id)\n+    data = request.get_json()\n+    \n+    menu_item.name = data.get('name', menu_item.name)\n+    menu_item.description = data.get('description', menu_item.description)\n+    menu_item.price = data.get('price', menu_item.price)\n+    menu_item.category = data.get('category', menu_item.category)\n     \n-    if not menu_item:\n-        return jsonify({'error': 'Menu item not found'}), 404\n-        \n-    return jsonify(menu_item.to_dict()), 200\n+    db.session.commit()\n+    return jsonify(menu_item.to_dict())\n \n-@menu_items_bp.route('/menu_items/<int:id>', methods=['DELETE'])\n+@menu_items_bp.route('/menu-items/<int:id>', methods=['DELETE'])\n def delete_menu_item(id):\n-    menu_item = MenuItem.query.get(id)\n-    \n-    if not menu_item:\n-        return jsonify({'error': 'Menu item not found'}), 404\n-        \n+    menu_item = MenuItem.query.get_or_404(id)\n     db.session.delete(menu_item)\n     db.session.commit()\n-    \n     return '', 204\ndiff --git a/output_restaurant_mgmt_system_flask/app/__init__.py b/output_restaurant_mgmt_system_flask/app/__init__.py\nnew file mode 100644\nindex 0000000..edfbbd7\n--- /dev/null\n+++ b/output_restaurant_mgmt_system_flask/app/__init__.py\n@@ -0,0 +1,21 @@\n+from flask import Flask\n+from os import environ\n+from dotenv import load_dotenv\n+from .database import init_db\n+\n+load_dotenv()\n+\n+def create_app():\n+    app = Flask(__name__)\n+    \n+    # Initialize database\n+    init_db(app)\n+    \n+    # Register blueprints\n+    from .routes import menu_items_bp\n+    app.register_blueprint(menu_items_bp)\n+    \n+    return app\n+\n+# Create the application instance\n+app = create_app()\ndiff --git a/output_restaurant_mgmt_system_flask/app/database.py b/output_restaurant_mgmt_system_flask/app/database.py\nnew file mode 100644\nindex 0000000..edb7daf\n--- /dev/null\n+++ b/output_restaurant_mgmt_system_flask/app/database.py\n@@ -0,0 +1,14 @@\n+from flask_sqlalchemy import SQLAlchemy\n+from os import environ\n+\n+db = SQLAlchemy()\n+\n+def init_db(app):\n+    app.config['SQLALCHEMY_DATABASE_URI'] = environ.get('DATABASE_URL', 'sqlite:///restaurant.db')\n+    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n+    db.init_app(app)\n+    \n+    with app.app_context():\n+        db.create_all()\n+        \n+    return db\ndiff --git a/output_restaurant_mgmt_system_flask/app/models.py b/output_restaurant_mgmt_system_flask/app/models.py\nnew file mode 100644\nindex 0000000..6949786\n--- /dev/null\n+++ b/output_restaurant_mgmt_system_flask/app/models.py\n@@ -0,0 +1,22 @@\n+from .database import db\n+\n+class MenuItem(db.Model):\n+    __tablename__ = 'menu_items'\n+    \n+    id = db.Column(db.Integer, primary_key=True)\n+    name = db.Column(db.String(100), nullable=False)\n+    description = db.Column(db.Text)\n+    price = db.Column(db.Float, nullable=False)\n+    category = db.Column(db.String(50))\n+    \n+    def __repr__(self):\n+        return f'<MenuItem {self.name}>'\n+    \n+    def to_dict(self):\n+        return {\n+            'id': self.id,\n+            'name': self.name,\n+            'description': self.description,\n+            'price': self.price,\n+            'category': self.category\n+        }\ndiff --git a/tests/test_routes.py b/tests/test_routes.py\nindex d3e3fc2..7b22673 100644\n--- a/tests/test_routes.py\n+++ b/tests/test_routes.py\n@@ -1,58 +1,100 @@\n import pytest\n from app import create_app, db\n from app.models import MenuItem\n+import json\n \n @pytest.fixture\n-def app():\n+def client():\n     app = create_app()\n     app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'\n     app.config['TESTING'] = True\n     \n-    with app.app_context():\n-        db.create_all()\n-        yield app\n-        db.session.remove()\n-        db.drop_all()\n+    with app.test_client() as client:\n+        with app.app_context():\n+            db.create_all()\n+            yield client\n+            db.session.remove()\n+            db.drop_all()\n \n-@pytest.fixture\n-def client(app):\n-    return app.test_client()\n-\n-def test_get_menu_items(client):\n-    response = client.get('/menu_items')\n+def test_get_menu_items_empty(client):\n+    response = client.get('/menu-items')\n     assert response.status_code == 200\n-    assert response.json == []\n+    assert json.loads(response.data) == []\n \n def test_create_menu_item(client):\n-    response = client.post('/menu_items', json={\n+    data = {\n         'name': 'Test Item',\n-        'description': 'Test Description'\n-    })\n+        'description': 'Test Description',\n+        'price': 9.99,\n+        'category': 'Test Category'\n+    }\n+    response = client.post('/menu-items', \n+                          data=json.dumps(data),\n+                          content_type='application/json')\n     assert response.status_code == 201\n-    assert response.json['name'] == 'Test Item'\n-    assert response.json['description'] == 'Test Description'\n+    response_data = json.loads(response.data)\n+    assert response_data['name'] == data['name']\n+    assert response_data['price'] == data['price']\n \n def test_get_menu_item(client):\n     # First create an item\n-    create_response = client.post('/menu_items', json={\n+    item_data = {\n         'name': 'Test Item',\n-        'description': 'Test Description'\n-    })\n-    item_id = create_response.json['id']\n+        'description': 'Test Description',\n+        'price': 9.99,\n+        'category': 'Test Category'\n+    }\n+    create_response = client.post('/menu-items',\n+                                data=json.dumps(item_data),\n+                                content_type='application/json')\n+    item_id = json.loads(create_response.data)['id']\n     \n-    # Then get it\n-    response = client.get(f'/menu_items/{item_id}')\n+    # Then retrieve it\n+    response = client.get(f'/menu-items/{item_id}')\n     assert response.status_code == 200\n-    assert response.json['name'] == 'Test Item'\n+    response_data = json.loads(response.data)\n+    assert response_data['name'] == item_data['name']\n+    assert response_data['price'] == item_data['price']\n+\n+def test_update_menu_item(client):\n+    # First create an item\n+    item_data = {\n+        'name': 'Original Name',\n+        'price': 9.99,\n+    }\n+    create_response = client.post('/menu-items',\n+                                data=json.dumps(item_data),\n+                                content_type='application/json')\n+    item_id = json.loads(create_response.data)['id']\n+    \n+    # Then update it\n+    update_data = {\n+        'name': 'Updated Name',\n+        'price': 19.99\n+    }\n+    response = client.put(f'/menu-items/{item_id}',\n+                         data=json.dumps(update_data),\n+                         content_type='application/json')\n+    assert response.status_code == 200\n+    response_data = json.loads(response.data)\n+    assert response_data['name'] == update_data['name']\n+    assert response_data['price'] == update_data['price']\n \n def test_delete_menu_item(client):\n     # First create an item\n-    create_response = client.post('/menu_items', json={\n+    item_data = {\n         'name': 'Test Item',\n-        'description': 'Test Description'\n-    })\n-    item_id = create_response.json['id']\n+        'price': 9.99,\n+    }\n+    create_response = client.post('/menu-items',\n+                                data=json.dumps(item_data),\n+                                content_type='application/json')\n+    item_id = json.loads(create_response.data)['id']\n     \n     # Then delete it\n-    response = client.delete(f'/menu_items/{item_id}')\n+    response = client.delete(f'/menu-items/{item_id}')\n     assert response.status_code == 204\n+    \n+    # Verify it's gone\n+    get_response = client.get(f'/menu-items/{item_id}')\n+    assert get_response.status_code == 404\n"}
