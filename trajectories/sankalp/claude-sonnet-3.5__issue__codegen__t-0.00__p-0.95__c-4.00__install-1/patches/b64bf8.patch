
diff --git a/app/__init__.py b/app/__init__.py
index 8036d13..8ac755e 100644
--- a/app/__init__.py
+++ b/app/__init__.py
@@ -9,7 +9,7 @@ db = SQLAlchemy()
 
 def create_app():
     app = Flask(__name__)
-    app.config['SQLALCHEMY_DATABASE_URI'] = environ.get('DATABASE_URL')
+    app.config['SQLALCHEMY_DATABASE_URI'] = environ.get('DATABASE_URL', 'sqlite:///restaurant.db')
     app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
 
     db.init_app(app)
@@ -18,3 +18,5 @@ def create_app():
     app.register_blueprint(menu_items_bp)
 
     return app
+
+app = create_app()
diff --git a/app/models.py b/app/models.py
index bc57ca9..01bcdbd 100644
--- a/app/models.py
+++ b/app/models.py
@@ -2,14 +2,21 @@ from app import db
 
 class MenuItem(db.Model):
     __tablename__ = 'menu_items'
-
+    
     id = db.Column(db.Integer, primary_key=True)
     name = db.Column(db.String(100), nullable=False)
-    description = db.Column(db.String(500))
-
+    description = db.Column(db.Text)
+    price = db.Column(db.Float, nullable=False)
+    category = db.Column(db.String(50))
+    
+    def __repr__(self):
+        return f'<MenuItem {self.name}>'
+    
     def to_dict(self):
         return {
             'id': self.id,
             'name': self.name,
-            'description': self.description
+            'description': self.description,
+            'price': self.price,
+            'category': self.category
         }
diff --git a/app/routes.py b/app/routes.py
index 8feab93..6766144 100644
--- a/app/routes.py
+++ b/app/routes.py
@@ -4,45 +4,45 @@ from app import db
 
 menu_items_bp = Blueprint('menu_items', __name__)
 
-@menu_items_bp.route('/menu_items', methods=['GET'])
+@menu_items_bp.route('/menu-items', methods=['GET'])
 def get_menu_items():
     menu_items = MenuItem.query.all()
-    return jsonify([item.to_dict() for item in menu_items]), 200
+    return jsonify([item.to_dict() for item in menu_items])
 
-@menu_items_bp.route('/menu_items', methods=['POST'])
+@menu_items_bp.route('/menu-items/<int:id>', methods=['GET'])
+def get_menu_item(id):
+    menu_item = MenuItem.query.get_or_404(id)
+    return jsonify(menu_item.to_dict())
+
+@menu_items_bp.route('/menu-items', methods=['POST'])
 def create_menu_item():
     data = request.get_json()
-    
-    if not data or 'name' not in data:
-        return jsonify({'error': 'Name is required'}), 400
-
-    menu_item = MenuItem(
+    new_item = MenuItem(
         name=data['name'],
-        description=data.get('description', '')
+        description=data.get('description'),
+        price=data['price'],
+        category=data.get('category')
     )
-    
-    db.session.add(menu_item)
+    db.session.add(new_item)
     db.session.commit()
-    
-    return jsonify(menu_item.to_dict()), 201
+    return jsonify(new_item.to_dict()), 201
 
-@menu_items_bp.route('/menu_items/<int:id>', methods=['GET'])
-def get_menu_item(id):
-    menu_item = MenuItem.query.get(id)
+@menu_items_bp.route('/menu-items/<int:id>', methods=['PUT'])
+def update_menu_item(id):
+    menu_item = MenuItem.query.get_or_404(id)
+    data = request.get_json()
+    
+    menu_item.name = data.get('name', menu_item.name)
+    menu_item.description = data.get('description', menu_item.description)
+    menu_item.price = data.get('price', menu_item.price)
+    menu_item.category = data.get('category', menu_item.category)
     
-    if not menu_item:
-        return jsonify({'error': 'Menu item not found'}), 404
-        
-    return jsonify(menu_item.to_dict()), 200
+    db.session.commit()
+    return jsonify(menu_item.to_dict())
 
-@menu_items_bp.route('/menu_items/<int:id>', methods=['DELETE'])
+@menu_items_bp.route('/menu-items/<int:id>', methods=['DELETE'])
 def delete_menu_item(id):
-    menu_item = MenuItem.query.get(id)
-    
-    if not menu_item:
-        return jsonify({'error': 'Menu item not found'}), 404
-        
+    menu_item = MenuItem.query.get_or_404(id)
     db.session.delete(menu_item)
     db.session.commit()
-    
     return '', 204
diff --git a/output_restaurant_mgmt_system_flask/app/__init__.py b/output_restaurant_mgmt_system_flask/app/__init__.py
new file mode 100644
index 0000000..edfbbd7
--- /dev/null
+++ b/output_restaurant_mgmt_system_flask/app/__init__.py
@@ -0,0 +1,21 @@
+from flask import Flask
+from os import environ
+from dotenv import load_dotenv
+from .database import init_db
+
+load_dotenv()
+
+def create_app():
+    app = Flask(__name__)
+    
+    # Initialize database
+    init_db(app)
+    
+    # Register blueprints
+    from .routes import menu_items_bp
+    app.register_blueprint(menu_items_bp)
+    
+    return app
+
+# Create the application instance
+app = create_app()
diff --git a/output_restaurant_mgmt_system_flask/app/database.py b/output_restaurant_mgmt_system_flask/app/database.py
new file mode 100644
index 0000000..edb7daf
--- /dev/null
+++ b/output_restaurant_mgmt_system_flask/app/database.py
@@ -0,0 +1,14 @@
+from flask_sqlalchemy import SQLAlchemy
+from os import environ
+
+db = SQLAlchemy()
+
+def init_db(app):
+    app.config['SQLALCHEMY_DATABASE_URI'] = environ.get('DATABASE_URL', 'sqlite:///restaurant.db')
+    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
+    db.init_app(app)
+    
+    with app.app_context():
+        db.create_all()
+        
+    return db
diff --git a/output_restaurant_mgmt_system_flask/app/models.py b/output_restaurant_mgmt_system_flask/app/models.py
new file mode 100644
index 0000000..6949786
--- /dev/null
+++ b/output_restaurant_mgmt_system_flask/app/models.py
@@ -0,0 +1,22 @@
+from .database import db
+
+class MenuItem(db.Model):
+    __tablename__ = 'menu_items'
+    
+    id = db.Column(db.Integer, primary_key=True)
+    name = db.Column(db.String(100), nullable=False)
+    description = db.Column(db.Text)
+    price = db.Column(db.Float, nullable=False)
+    category = db.Column(db.String(50))
+    
+    def __repr__(self):
+        return f'<MenuItem {self.name}>'
+    
+    def to_dict(self):
+        return {
+            'id': self.id,
+            'name': self.name,
+            'description': self.description,
+            'price': self.price,
+            'category': self.category
+        }
diff --git a/tests/test_routes.py b/tests/test_routes.py
index d3e3fc2..7b22673 100644
--- a/tests/test_routes.py
+++ b/tests/test_routes.py
@@ -1,58 +1,100 @@
 import pytest
 from app import create_app, db
 from app.models import MenuItem
+import json
 
 @pytest.fixture
-def app():
+def client():
     app = create_app()
     app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'
     app.config['TESTING'] = True
     
-    with app.app_context():
-        db.create_all()
-        yield app
-        db.session.remove()
-        db.drop_all()
+    with app.test_client() as client:
+        with app.app_context():
+            db.create_all()
+            yield client
+            db.session.remove()
+            db.drop_all()
 
-@pytest.fixture
-def client(app):
-    return app.test_client()
-
-def test_get_menu_items(client):
-    response = client.get('/menu_items')
+def test_get_menu_items_empty(client):
+    response = client.get('/menu-items')
     assert response.status_code == 200
-    assert response.json == []
+    assert json.loads(response.data) == []
 
 def test_create_menu_item(client):
-    response = client.post('/menu_items', json={
+    data = {
         'name': 'Test Item',
-        'description': 'Test Description'
-    })
+        'description': 'Test Description',
+        'price': 9.99,
+        'category': 'Test Category'
+    }
+    response = client.post('/menu-items', 
+                          data=json.dumps(data),
+                          content_type='application/json')
     assert response.status_code == 201
-    assert response.json['name'] == 'Test Item'
-    assert response.json['description'] == 'Test Description'
+    response_data = json.loads(response.data)
+    assert response_data['name'] == data['name']
+    assert response_data['price'] == data['price']
 
 def test_get_menu_item(client):
     # First create an item
-    create_response = client.post('/menu_items', json={
+    item_data = {
         'name': 'Test Item',
-        'description': 'Test Description'
-    })
-    item_id = create_response.json['id']
+        'description': 'Test Description',
+        'price': 9.99,
+        'category': 'Test Category'
+    }
+    create_response = client.post('/menu-items',
+                                data=json.dumps(item_data),
+                                content_type='application/json')
+    item_id = json.loads(create_response.data)['id']
     
-    # Then get it
-    response = client.get(f'/menu_items/{item_id}')
+    # Then retrieve it
+    response = client.get(f'/menu-items/{item_id}')
     assert response.status_code == 200
-    assert response.json['name'] == 'Test Item'
+    response_data = json.loads(response.data)
+    assert response_data['name'] == item_data['name']
+    assert response_data['price'] == item_data['price']
+
+def test_update_menu_item(client):
+    # First create an item
+    item_data = {
+        'name': 'Original Name',
+        'price': 9.99,
+    }
+    create_response = client.post('/menu-items',
+                                data=json.dumps(item_data),
+                                content_type='application/json')
+    item_id = json.loads(create_response.data)['id']
+    
+    # Then update it
+    update_data = {
+        'name': 'Updated Name',
+        'price': 19.99
+    }
+    response = client.put(f'/menu-items/{item_id}',
+                         data=json.dumps(update_data),
+                         content_type='application/json')
+    assert response.status_code == 200
+    response_data = json.loads(response.data)
+    assert response_data['name'] == update_data['name']
+    assert response_data['price'] == update_data['price']
 
 def test_delete_menu_item(client):
     # First create an item
-    create_response = client.post('/menu_items', json={
+    item_data = {
         'name': 'Test Item',
-        'description': 'Test Description'
-    })
-    item_id = create_response.json['id']
+        'price': 9.99,
+    }
+    create_response = client.post('/menu-items',
+                                data=json.dumps(item_data),
+                                content_type='application/json')
+    item_id = json.loads(create_response.data)['id']
     
     # Then delete it
-    response = client.delete(f'/menu_items/{item_id}')
+    response = client.delete(f'/menu-items/{item_id}')
     assert response.status_code == 204
+    
+    # Verify it's gone
+    get_response = client.get(f'/menu-items/{item_id}')
+    assert get_response.status_code == 404
